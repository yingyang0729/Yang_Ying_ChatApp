export default {
    template: `
    <html lang="en">
    <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel='stylesheet' href='/css/main.css'/>

    <title>Chat</title>
    </head>
    <body>
    <h1>Chat App</h1>

    <main id="app">
        <section>
            <h2>Imput message here:</h2>
            <input id="nickname" v-model="nickname" type="text" placeholder="Nickname?">
        <form>
            <label for="message">Something to say?</label>
            <textarea @focus="catchTextFocus" v-model="message" id="textarea" class="message" autocomplete="off"></textarea>
            <input @click.prevent="dispatchMessage" type="submit" value="Chat">
        </form>
        </section>

        <section class="messages">
            <ul id="messages">
                <!-- render a new message component for every message -->
                <newmsg v-for="message in messages" :message="message"></newmsg>
            </ul>
        </section>
    </main>


   <script>
   // imports will always go at the top
import ChatMsg from 'ChatMessage.js';

const socket = io();

//utility functions for socket
function setUserID ({ sID }) {

    //save our uniique ID generated by Socket on the server side - this is how we track individual connections to the chat service
    vm.socketID = sID;

}

function showNewMessage( { message }) {
    //debugger;
    vm.messages.push(message);
}

function handleUserTyping(user) {
  console.log('somebody is typing something');
}

  const { createApp } = Vue

  const vm = createApp({
    data() {
      return {
        socketID: '',
        message: '',
        messages: [],
        nickname: ''
      }
    }, 

    methods: {
        dispatchMessage() {
            socket.emit('chat_message', {
                content: this.message,
                name: this.nickname || 'anonymous',
                id: this.socketID
            })

            this.message = "";
        },

        catchTextFocus() {
          // emit a custom typing event and broadcast it to the server
          socket.emit('user_typing', {
            name: this.nickname || 'anonymous'
          })
        }
    },

    components: {
        newmsg: ChatMsg
    }

  }).mount('#app')

socket.addEventListener('connected', setUserID);
socket.addEventListener('new_message', showNewMessage);
socket.addEventListener('typing', handleUserTyping);
</script>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>


    <script src="./socket.io/dist/socket.io.js"></script>
    <script src="ChatMessage.js" type="module" defer></script>
    
</body>
</html>
    <section>
        <h1>{{ message }}</h1>
        <button @click="registerUser">Register for Awesome Swag!</button>
    </section>
    `,

    data: function() {
        return {
            message: "Welcome to my Super Awesome App!"
        }
    },

    methods: {
        registerUser() {
            console.log('clicked register button');
        }
    }
}